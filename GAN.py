# -*- coding: utf-8 -*-
"""GAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oPoU6U98v5G_J_bufThCBnkL225tf7bd

**1. Import Dependencies and Data**
"""

import warnings
warnings.filterwarnings('ignore')

!pip install tensorflow tensorflow-datasets ipywidgets matplotlib

#pip list

import tensorflow as tf
import tensorflow_datasets as tfds
from matplotlib import pyplot as plt
# Importing Tensorflow.The below code is to prevent the GPU devices in eating up all RAM
"""gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)"""

# Importing Tensorflow datasets for fashion mnist
# Use tensorflow dataset API to download the dataset and use only training set

dataset_name = "fashion_mnist"  # Replace with the dataset you want
ds = tfds.load(name=dataset_name, split="train")

ds.as_numpy_iterator().next().keys()

"""# **2. Visualise data and Build dataset**"""

import numpy as np
dataiterator = ds.as_numpy_iterator()

dataiterator.next()['image'].shape

# setup subplot format
fig, ax = plt.subplots(ncols=4, figsize=(20,20))
#loop four times and get images
for idx in range(4):
  #grab an image and label it
  sample = dataiterator.next()
  #plot the image using a specific subplot
  ax[idx].imshow(np.squeeze(sample['image']))
  # Appending the image label as the plot title . Its optional
  ax[idx].title.set_text(sample['label'])

# Function to scale image between 0 and 1 & return images
def scale_images(data):
  image = data['image']
  return image / 255

# Reloaded the dataset
ds = tfds.load('fashion_mnist', split = 'train')
# Running the dataset through scale_images preprocessing step
ds = ds.map(scale_images)
# cache the dataset for the batch
ds = ds.cache()
# shuffle it up
ds = ds.shuffle(60000)
# Batch into 128 images per sample
ds = ds.batch(128)
# reduces the likelihood of bottlenecking
ds = ds.prefetch(64)

ds.as_numpy_iterator().next().shape

"""**3. Build Neural Networks**"""

# Importing Modelling Components
# Bringing the sequential API for Generator and Discriminator
from tensorflow.keras.models import Sequential
# Bringing the layers for neural netwroks
from tensorflow.keras.layers import Conv2D, Dense, Flatten, Reshape, LeakyReLU, Dropout, UpSampling2D

"""**3.1 Build Generator**"""

def build_generator():
  model = Sequential()
  # Takes random values and reshape it to 7x7x128
  # Begining of a generated image
  model.add(Dense(7*7*128, input_dim=128))
  model.add(LeakyReLU(0.2))
  model.add(Reshape((7,7,128)))

  # Upsampling Block1
  model.add(UpSampling2D())
  # 5 is the kernel filter 5*5 , 128 is the no of channels
  model.add(Conv2D(128, 5 , padding='same'))
  model.add(LeakyReLU(0.2))

  # Upsampling Block2
  model.add(UpSampling2D())
  model.add(Conv2D(128, 5 , padding='same'))
  model.add(LeakyReLU(0.2))

  # Convolutional Block1
  model.add(Conv2D(128, 4 , padding='same'))
  model.add(LeakyReLU(0.2))

  # Convolutional Block2
  model.add(Conv2D(128, 4 , padding='same'))
  model.add(LeakyReLU(0.2))

  # Convolutional layer to get 1 channel
  # reducing the channel to 1 to meet the input dim . Using sigmoid to get output between 0 and 1
  model.add(Conv2D(1, 4 , padding='same', activation='sigmoid'))

  return model

generator = build_generator()
generator.summary()

# generate new fashion
img = generator.predict(np.random.randn(4, 128, 1))
# setup subplot format
fig, ax = plt.subplots(ncols=4, figsize=(20,20))
#loop four times and get images
for idx, img in enumerate(img):
  #plot the image using a specific subplot
  ax[idx].imshow(np.squeeze(img))
  # Appending the image label as the plot title . Its optional
  ax[idx].title.set_text(idx)

"""**3.2 Build Discriminator**"""

def build_discriminator():
  model = Sequential()
  # First conv block
  model.add(Conv2D(32, 5, input_shape=(28,28,1)))
  model.add(LeakyReLU(0.2))
  # Dropout is for regularization
  model.add(Dropout(0.4))

  # Second conv block
  model.add(Conv2D(64, 5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  # Third conv block
  model.add(Conv2D(128, 5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  # Fourth conv block
  model.add(Conv2D(256, 5))
  model.add(LeakyReLU(0.2))
  model.add(Dropout(0.4))

  # Flatten then pass to dense layer
  model.add(Flatten())
  model.add(Dropout(0.4))
  model.add(Dense(1, activation='sigmoid'))

  return model

discriminator = build_discriminator()
discriminator.summary()

"""**4.Construct Training Loop**

**4.1 Setup Losses and Optimisers**
"""

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import BinaryCrossentropy

# Need to keep the learning rate of discriminator slower than generator learning rate
g_opt = Adam(learning_rate=0.0001)
d_opt = Adam(learning_rate=0.00001)
g_loss = BinaryCrossentropy()
d_loss = BinaryCrossentropy()

"""**4.2 Build Subclasses Model**"""

from tensorflow.keras.models import Model

class FashionGAN(Model):
    def __init__(self, generator, discriminator, *args, **kwargs):
        # Pass through args and kwargs to base class
        super().__init__(*args, **kwargs)

        # Create attributes for gen and disc
        self.generator = generator
        self.discriminator = discriminator

    def compile(self, g_opt, d_opt, g_loss, d_loss, *args, **kwargs):
        # Compile with base class
        super().compile(*args, **kwargs)

        # Create attributes for losses and optimizers
        self.g_opt = g_opt
        self.d_opt = d_opt
        self.g_loss = g_loss
        self.d_loss = d_loss

    def train_step(self, batch):
        # Get the data
        real_images = batch
        fake_images = self.generator(tf.random.normal((128, 128, 1)), training=False)

        # Train the discriminator
        with tf.GradientTape() as d_tape:
            # Pass the real and fake images to the discriminator model
            yhat_real = self.discriminator(real_images, training=True)
            yhat_fake = self.discriminator(fake_images, training=True)
            yhat_realfake = tf.concat([yhat_real, yhat_fake], axis=0)

            # Create labels for real and fakes images
            y_realfake = tf.concat([tf.zeros_like(yhat_real), tf.ones_like(yhat_fake)], axis=0)

            # Add some noise to the TRUE outputs
            noise_real = 0.15*tf.random.uniform(tf.shape(yhat_real))
            noise_fake = -0.15*tf.random.uniform(tf.shape(yhat_fake))
            y_realfake += tf.concat([noise_real, noise_fake], axis=0)

            # Calculate loss - BINARYCROSS
            total_d_loss = self.d_loss(y_realfake, yhat_realfake)

        # Apply backpropagation - nn learn
        dgrad = d_tape.gradient(total_d_loss, self.discriminator.trainable_variables)
        self.d_opt.apply_gradients(zip(dgrad, self.discriminator.trainable_variables))

        # Train the generator
        with tf.GradientTape() as g_tape:
            # Generate some new images
            gen_images = self.generator(tf.random.normal((128,128,1)), training=True)

            # Create the predicted labels
            predicted_labels = self.discriminator(gen_images, training=False)

            # Calculate loss - trick to training to fake out the discriminator
            total_g_loss = self.g_loss(tf.zeros_like(predicted_labels), predicted_labels)

        # Apply backprop
        ggrad = g_tape.gradient(total_g_loss, self.generator.trainable_variables)
        self.g_opt.apply_gradients(zip(ggrad, self.generator.trainable_variables))

        return {"d_loss":total_d_loss, "g_loss":total_g_loss}

# Create instance of subclassed model
fashgan = FashionGAN(generator, discriminator)

# Compile the model
fashgan.compile(g_opt, d_opt, g_loss, d_loss)

"""**4.3 Build the Callback**"""

import os
from tensorflow.keras.preprocessing.image import array_to_img
from tensorflow.keras.callbacks import Callback

class ModelMonitor(Callback):
    def __init__(self, num_img=1, latent_dim=128):
        self.num_img = num_img
        self.latent_dim = latent_dim

    def on_epoch_end(self, epoch, logs=None):
        random_latent_vectors = tf.random.uniform((self.num_img, self.latent_dim,1))
        generated_images = self.model.generator(random_latent_vectors)
        generated_images *= 255
        generated_images.numpy()
        for i in range(self.num_img):
            img = array_to_img(generated_images[i])
            img.save(os.path.join('images', f'generated_img_{epoch}_{i}.png'))

"""**4.3 Train**"""

# Recommend 2000 epochs
hist = fashgan.fit(ds, epochs=100, callbacks=[ModelMonitor()])

"""**4.4 Review Performance**"""

plt.suptitle('Loss')
plt.plot(hist.history['d_loss'], label='d_loss')
plt.plot(hist.history['g_loss'], label='g_loss')
plt.legend()
plt.show()

"""**5. Test Out the Generator**

**5.1 Generate Images**
"""

imgs = generator.predict(tf.random.normal((100, 128, 1)))

imgs.shape

# Select the images generated by last 16 epochs out of 100 epochs to see how good are the results
recent_generated_imgs = imgs[-16:]

recent_generated_imgs.shape

fig, ax = plt.subplots(ncols=4, nrows=4, figsize=(20,20))
for r in range(4):
    for c in range(4):
        ax[r][c].imshow(recent_generated_imgs[(r+1)*(c+1)-1])

"""**5.2 Save the Model**"""

#generator.save('generator.h5')
#discriminator.save('discriminator.h5')

#generator.save('generator.keras')
#discriminator.save('discriminator.keras')

"""**6. Next Steps**"""

# The results generated by GAN model is not closer to a real Fashion image.
# We can increase the epochs count from 100 to 2000 while fitting the GAN model

!zip -r '/content/images.zip' '/content/images/'

